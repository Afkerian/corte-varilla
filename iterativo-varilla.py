def bottom_up_cut_rod(p, n):
    r = [0] * (n + 1)  # r[i] almacenar√° la m√°xima ganancia para longitud i
    s = [0] * (n + 1)  # s[i] almacenar√° el primer corte √≥ptimo para longitud i

    # Construimos la soluci√≥n √≥ptima de abajo hacia arriba
    for j in range(1, n + 1):
        q = -float('inf')
        for i in range(1, j + 1):
            if q < p[i - 1] + r[j - i]:  # Verificamos si hacer un corte en 'i' es mejor
                q = p[i - 1] + r[j - i]
                s[j] = i  # Guardamos el corte √≥ptimo
        r[j] = q  # Guardamos la mejor ganancia para longitud j

    return r[n], s

# üìå Funci√≥n para reconstruir la soluci√≥n √≥ptima (c√≥mo cortar la varilla)
def print_optimal_cut(s, n):
    while n > 0:
        print(f"Corte de longitud {s[n]}")
        n -= s[n]

# üìå Ejemplo de uso
p = [1, 5, 8, 9]  # Precio para cada longitud de varilla
n = 4  # Longitud de la varilla

# ‚úÖ Llamamos a la funci√≥n con programaci√≥n din√°mica
max_profit, s = bottom_up_cut_rod(p, n)

# ‚úÖ Mostramos la ganancia m√°xima
print(f"Ganancia m√°xima: {max_profit}")

# ‚úÖ Mostramos los cortes √≥ptimos
print("Cortes √≥ptimos:")
print_optimal_cut(s, n)
